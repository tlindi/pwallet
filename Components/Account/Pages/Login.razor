@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SimpLN.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="auth-container">
	<div class="auth-card">
		<h3 class="auth-title">Login</h3>
		<p class="auth-description">Access your account by logging in below.</p>

		<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
			<DataAnnotationsValidator />

			<div class="form-group">
				<label>Email</label>
				<InputText @bind-Value="Input.Email"
						   id="Input.Email"
						   class="form-control auth-input"
						   autocomplete="username"
						   aria-required="true"
						   placeholder="name@example.com" />
				<ValidationMessage For="() => Input.Email" class="text-danger auth-error" />
			</div>

			<div class="form-group">
				<label>Password</label>
				<InputText type="password"
						   @bind-Value="Input.Password"
						   id="Input.Password"
						   class="form-control auth-input"
						   autocomplete="current-password"
						   aria-required="true"
						   placeholder="password" />
				<ValidationMessage For="() => Input.Password" class="text-danger auth-error" />
			</div>

			<div class="form-group form-check">
				<InputCheckbox @bind-Value="Input.RememberMe"
							   class="form-check-input" />
				<label class="form-check-label">Remember me</label>
			</div>

			<button type="submit" class="custom-button custom-button-outline w-100 mt-3">Log in</button>
			@if (!string.IsNullOrEmpty(errorMessage))
			{
				<p class="text-danger auth-error">@errorMessage</p>
			}
		</EditForm>


		<p class="mt-3 text-center">
			Don't have an account?<br />
			<a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })">Register here</a>
		</p>
	</div>
</div>

@code {
	private string? errorMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
		if (result.Succeeded)
		{
			Logger.LogInformation("User logged in.");
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.RequiresTwoFactor)
		{
			RedirectManager.RedirectTo(
				"Account/LoginWith2fa",
				new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			Console.WriteLine($"Error Message Set: {errorMessage}"); // Debugging output
			errorMessage = "Error: Invalid login. Check your email and password.";
			Input.Email = "";
			Input.Password = "";
			StateHasChanged();
		}
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; } = "";

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[Display(Name = "Remember me?")]
		public bool RememberMe { get; set; }
	}
}
